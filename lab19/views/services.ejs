<%- include("includes/head.ejs", { active: active, session: session}) %>

<main class="container">
  <h1>Preguntas frecuentes</h1>
  <h2>¿Qué otros templating engines existen para node?</h2>

  <br />

  <h2>Explicación de Templates:</h2>

  <ol>
    <li>
      <h3>Pug (antes conocido como Jade):</h3>
      <p>
        Pug es un motor de plantillas para Node.js y para el navegador que
        simplifica la escritura de HTML mediante una sintaxis simplificada y más
        concisa. Utiliza sangrías en lugar de etiquetas de cierre y puntos y
        comas para indicar la estructura del documento.
      </p>
      <pre><code>html
    head
        title Mi Página
    body
        h1 Bienvenido
        p Este es un párrafo de ejemplo.
        </code></pre>
    </li>
    <li>
      <h3>Handlebars:</h3>
      <p>
        Handlebars es un motor de plantillas que permite la creación de
        plantillas HTML con expresiones insertadas. Utiliza dobles llaves
        <code>{{}}</code> para insertar valores y proporciona estructuras de
        control como <code>{{#if}}</code> y <code>{{#each}}</code
        >.
      </p>
      <pre><code>&lt;!-- Ejemplo de Handlebars --&gt;
    &lt;h1&gt;{{ titulo }}&lt;/h1&gt;
    {{#each lista}}
    &lt;p&gt;{{ this }}&lt;/p&gt;
    {{/each}}
        </code></pre>
    </li>
    <li>
      <h3>EJS (Embedded JavaScript):</h3>
      <p>
        EJS es un motor de plantillas que te permite generar HTML con
        JavaScript. Utiliza etiquetas de apertura y cierre
        <code>&lt;% %&gt;</code> para insertar código JavaScript en las
        plantillas.
      </p>
      <pre><code>&lt;!-- Ejemplo de EJS --&gt;
    &lt;h1&gt;&lt;%= titulo %&gt;&lt;/h1&gt;
    &lt;% for (let item of lista) { %&gt;
    &lt;p&gt;&lt;%= item %&gt;&lt;/p&gt;
    &lt;% } %&gt;
        </code></pre>
    </li>
  </ol>

  <h2>Cross-site Scripting (XSS):</h2>
  <p>
    Cross-site Scripting (XSS) es una vulnerabilidad de seguridad que permite a
    un atacante insertar scripts maliciosos (como JavaScript) en páginas web
    vistas por otros usuarios. Esto puede conducir a ataques como robo de
    cookies, redirección a sitios maliciosos, y más. Los ataques XSS suelen
    ocurrir cuando un sitio web no filtra adecuadamente los datos de entrada del
    usuario antes de mostrarlos en la página. Para prevenir ataques XSS, es
    importante validar y escapar los datos de entrada del usuario antes de
    mostrarlos en la página web.
  </p>

  <br />

  <h2>Beneficios del estilo MVC:</h2>
  <ul>
    <li>
      <h3>Separación de preocupaciones:</h3>
      <p>
        MVC separa la lógica de negocio (modelo), la presentación (vista) y el
        control de la aplicación (controlador), lo que facilita la comprensión y
        mantenimiento del código.
      </p>
    </li>
    <li>
      <h3>Reutilización de código:</h3>
      <p>
        Debido a la separación de responsabilidades, es más fácil reutilizar
        componentes de la aplicación en diferentes partes del sistema.
      </p>
    </li>
    <li>
      <h3>Facilita el desarrollo en equipo:</h3>
      <p>
        Al tener roles y responsabilidades claramente definidos para cada
        componente (modelo, vista, controlador), varios desarrolladores pueden
        trabajar en diferentes partes de la aplicación simultáneamente sin
        interferir entre sí.
      </p>
    </li>
    <li>
      <h3>Facilita las pruebas unitarias:</h3>
      <p>
        Debido a la separación de la lógica de negocio y la presentación, es más
        fácil escribir pruebas unitarias para cada componente por separado.
      </p>
    </li>
  </ul>

  <br />

  <h2>Desventajas del estilo MVC:</h2>
  <ul>
    <li>
      <h3>Complejidad adicional:</h3>
      <p>
        Implementar el patrón MVC puede agregar complejidad a una aplicación,
        especialmente para proyectos pequeños o simples donde la sobrecarga de
        tener tres capas separadas puede no ser justificada.
      </p>
    </li>
    <li>
      <h3>Curva de aprendizaje:</h3>
      <p>
        Para desarrolladores nuevos en el MVC, puede llevar tiempo comprender
        completamente cómo interactúan entre sí los componentes del modelo, la
        vista y el controlador.
      </p>
    </li>
    <li>
      <h3>Posible sobreingeniería:</h3>
      <p>
        En algunos casos, especialmente en proyectos pequeños, el uso de MVC
        puede llevar a una sobreingeniería, lo que significa que la complejidad
        agregada no proporciona beneficios significativos.
      </p>
    </li>
    <li>
      <h3>Posible acoplamiento excesivo:</h3>
      <p>
        Si no se diseña adecuadamente, el patrón MVC puede llevar a un
        acoplamiento excesivo entre los componentes del modelo, la vista y el
        controlador, lo que dificulta la modificación y el mantenimiento de la
        aplicación a largo plazo.
      </p>
    </li>
  </ul>

  <br />

  <h2>Preguntas Interacción con la base de datos:</h2>

  <ol>
    <li>
      <h3>
        ¿Qué ventajas tiene escribir el código SQL únicamente en la capa del
        modelo?
      </h3>
      <p>
        Escribir el código SQL únicamente en la capa del modelo proporciona
        varios beneficios:
      </p>
      <ul>
        <li>
          Separación de preocupaciones: Ayuda a mantener una clara separación
          entre la lógica de negocio (modelo) y la presentación (vista) o el
          control (controlador).
        </li>
        <li>
          Reutilización de código: Facilita la reutilización del código SQL en
          diferentes partes de la aplicación.
        </li>
        <li>
          Seguridad: Al mantener el código SQL en una capa separada, se reduce
          el riesgo de exposición de consultas SQL sensibles a ataques como la
          inyección SQL.
        </li>
        <li>
          Mantenibilidad: Simplifica la tarea de mantener y actualizar consultas
          SQL, ya que están centralizadas en una capa específica.
        </li>
      </ul>
    </li>
    <li>
      <h3>¿Qué es SQL injection y cómo se puede prevenir?</h3>
      <p>
        SQL injection es una vulnerabilidad de seguridad que ocurre cuando un
        atacante inserta código SQL malicioso en una consulta SQL a través de
        los datos proporcionados por el usuario. Esto puede permitir al atacante
        ejecutar comandos no autorizados en la base de datos, alterar datos, o
        incluso eliminar la base de datos por completo.
      </p>
      <p>
        Para prevenir SQL injection, se deben implementar las siguientes medidas
        de seguridad:
      </p>
      <ul>
        <li>
          Usar consultas parametrizadas o preparadas: Utilizar consultas
          parametrizadas o preparadas ayuda a separar los datos de entrada del
          código SQL, evitando así que los datos proporcionados por el usuario
          se interpreten como parte del código SQL.
        </li>
        <li>
          Validación de entrada de datos: Validar y filtrar cuidadosamente los
          datos de entrada del usuario para asegurarse de que cumplan con el
          formato esperado y no contengan caracteres maliciosos.
        </li>
        <li>
          Usar un ORM (Object-Relational Mapping): Utilizar un ORM puede
          proporcionar una capa de abstracción sobre la base de datos, lo que
          reduce la necesidad de escribir consultas SQL directamente y, por lo
          tanto, ayuda a prevenir SQL injection.
        </li>
        <li>
          Limitar los privilegios de la cuenta de base de datos: Asegurarse de
          que la cuenta de base de datos utilizada por la aplicación tenga los
          privilegios mínimos necesarios para realizar las operaciones
          requeridas, lo que limita el impacto de un posible ataque de inyección
          SQL.
        </li>
        <li>
          Escapar los datos de entrada: En caso de que sea necesario concatenar
          datos de entrada del usuario en consultas SQL, escapar los datos
          utilizando funciones específicas del lenguaje o bibliotecas diseñadas
          para este propósito.
        </li>
      </ul>
    </li>
  </ol>

  <br />

  <h2>¿Qué otras formas de autenticación existen?</h2>
  <p>
    Existen otras formas de autenticación como la autenticación biométrica, la
    autenticación de dos factores, la autenticación de un solo factor, la
    autenticación de tres factores, la autenticación de cuatro factores, entre
    otras.
  </p>

  <br />

  <h2>¿En qué consiste el control de acceso basado en roles?</h2>
  <p>
    El control de acceso basado en roles (RBAC) es un modelo de control de
    acceso que se basa en la asignación de roles a los usuarios. Los roles
    definen las tareas que un usuario puede realizar en un sistema. El control
    de acceso basado en roles se basa en la premisa de que los usuarios no
    tienen permisos directos, sino que se les asignan roles que definen sus
    permisos. Los roles se asignan a los usuarios y los usuarios adquieren los
    permisos asociados con sus roles. El control de acceso basado en roles es un
    enfoque eficaz para la gestión de la seguridad y la administración de los
    sistemas de información.
  </p>

  <br />

  <h2>
    Investiguen y describan 2 sistemas, uno que aplique RBAC y uno que no.
    Realicen un análisis de las ventajas y desventajas de cada uno con respecto
    al control de acceso.
  </h2>

  <br />

  <p>Ejemplo 1: Sistema de gestión de documentos</p>
  <p>RBAC (Control de acceso basado en roles):</p>
  <ul>
    <li>Roles: Administrador, Editor, Lector</li>
    <li>
      Permisos:
      <ul>
        <li>Administrador: Crear, editar, eliminar documentos.</li>
        <li>Editor: Editar y ver documentos.</li>
        <li>Lector: Ver documentos.</li>
      </ul>
    </li>
  </ul>

  <p>Ejemplo 2: Carpeta compartida en la nube</p>
  <p>DAC (Control de acceso discrecional):</p>
  <ul>
    <li>Propietario: El usuario que creó la carpeta.</li>
    <li>
      Permisos:
      <ul>
        <li>Usuarios específicos: Pueden ver, editar o eliminar archivos.</li>
        <li>
          Grupos: Miembros del grupo pueden ver, editar o eliminar archivos.
        </li>
      </ul>
    </li>
  </ul>

  <p>Análisis:</p>
  <p>Ventajas de RBAC:</p>
  <ul>
    <li>
      Simplifica la administración: Los permisos se asignan a roles, no a
      usuarios individuales.
    </li>
    <li>
      Mejora la seguridad: Reduce el riesgo de errores al asignar permisos.
    </li>
    <li>
      Mayor escalabilidad: Facilita la administración de permisos en grandes
      organizaciones.
    </li>
    <li>
      Mejora la auditoría: Permite un seguimiento más preciso del acceso a los
      recursos.
    </li>
  </ul>

  <p>Desventajas de RBAC:</p>
  <ul>
    <li>
      Menos flexibilidad: Puede ser difícil adaptar los roles a las necesidades
      específicas de cada usuario.
    </li>
    <li>
      Dificultad para definir roles: La definición de roles puede ser compleja
      en organizaciones con estructuras jerárquicas complejas.
    </li>
  </ul>

  <p>Ventajas de DAC:</p>
  <ul>
    <li>Más flexible: Permite un control más granular sobre los permisos.</li>
    <li>
      Más sencillo de implementar: No requiere una estructura de roles compleja.
    </li>
  </ul>

  <p>Desventajas de DAC:</p>
  <ul>
    <li>
      Administración más compleja: Dificultad para administrar permisos para un
      gran número de usuarios.
    </li>
    <li>
      Mayor riesgo de errores: Los errores al asignar permisos pueden
      comprometer la seguridad.
    </li>
    <li>
      Dificultad de auditoría: Dificultad para rastrear el acceso a los
      recursos.
    </li>
  </ul>

  <br />

  <h2>Referencias:</h2>
  <ul>
    <li><a href="https://pugjs.org/api/getting-started.html">PUG</a></li>
    <li><a href="https://handlebarsjs.com/">handlebars</a></li>
    <li><a href="https://ejs.co/">EJS</a></li>
    <li>
      <a href="https://owasp.org/www-community/attacks/xss/"
        >Cross-site Scripting (XSS)</a
      >
    </li>
    <li>
      <a href="https://www.freecodecamp.org/news/model-view-architecture/"
        >model-view-architecture</a
      >
    </li>
    <li>
      <a href="https://developer.mozilla.org/en-US/docs/Glossary/MVC">MVC</a>
    </li>
    <li>
      <a href="https://www.npmjs.com/package/mysql2">mysql2</a>
    </li>
    <li>
      <a
        href="https://andreafortuna.org/2016/05/16/sql-injection-in-a-nutshell/"
        >SQL Injection in a nutshell</a
      >
    </li>
    <li>
      <a
        href="https://medium.com/visually-explained/sql-injection-attacks-visually-explained-c71b5f9e1af2"
      >
        SQL Injection attacks visually explained
      </a>
    </li>
    <li>
      <a
        href="https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html"
        >SQL Injection Prevention</a
      >
    </li>
    <li>
      <a
        href="https://medium.com/codeep-io/common-security-issues-in-web-applications-part-1-af339360c646"
      >
        Common security issues in web applications
      </a>
    </li>
  </ul>
</main>

<%- include("includes/foot.ejs") %>
